generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]
  logs     Log[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions Action[]

  @@map("accounts")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verifications")
}

model Email {
  id        String   @id
  threadId  String
  userId    String
  to        String
  from      String
  subject   String
  indexedAt DateTime @default(now())

  actions Action[]

  @@map("emails")
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    String
  hour      String
  sender    String
  subject   String
  category  String
  status    String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("logs")
}


model Action {
  id           String    @id
  accountUid   String
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  modelVersion String

  account Account        @relation(fields: [accountUid], references: [id])
  emails  Email[]
  event   ActionEvent?
  summary ActionSummary?

  @@map("actions")
}

model ActionEvent {
  actionId  String   @id
  eventId   String   @unique
  startTime DateTime
  endTime   DateTime

  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@map("action_events")
}

model ActionSummary {
  actionId    String  @id
  summaryText String?

  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@map("action_summaries")
}
