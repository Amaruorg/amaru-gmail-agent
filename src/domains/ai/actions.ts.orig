"use server";

import { gmailService } from "@/domains/gmail/service";
import { headers } from "next/headers";
import { authService } from "../auth/service";
<<<<<<< HEAD
import type { ActionCollection, Email } from "@/domains/gmail/schema";

export async function getEmailsSummary(userPrompt?: string): Promise<ActionCollection> {
	try {
		const tokenData = await authService.getAccessToken("google", await headers());
		const messages = await gmailService.fetchInboxEmails(tokenData, { maxResults: 5 });

		if (!messages || messages.length === 0) {
			throw new Error("No emails found to summarize");
		}

		const emailsForAPI: Email[] = messages.map(msg => ({
			id: msg.id,
			subject: msg.subject,
			from: msg.from,
			threadId: undefined, // Fix later
		}));

		const basePrompt =
			"Summarize concisely unless important the next emails. Please provide a clear and concise summary of these emails unless the User Prompt says otherwise.";
		const prompt = `${basePrompt} ${userPrompt ? `\n\nUser prompt: ${userPrompt}` : ""}`;

		const response = await fetch(`http://localhost:3000/api/openrouter`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				prompt,
				emails: emailsForAPI,
				userPrompt
			}),
		});

		if (!response.ok) {
			throw new Error(`API call failed: ${response.status}`);
		}

		const actionCollection: ActionCollection = await response.json();
		return actionCollection;
=======
import { apiConfig } from "@/lib/config";
import { GmailMappers } from "@/domains/gmail/mappers";
import type { Action } from "@/domains/gmail/types";

export async function getEmailAnalysis(userPrompt?: string): Promise<string> {
	try {
		const tokenData = await authService.getAccessToken(await headers());
		const emails = (await gmailService.fetchInbox(tokenData)).emails;

		if (emails.length === 0) {
			throw new Error("No emails found to summarize");
		}

		const basePrompt = `
		You are an assistant that analyzes a batch of emails and outputs structured JSON actions.
		
		For every email:
		1. Always include exactly one action of type "summarize" that provides a clear, concise summary of the email's content and assigns an appropriate Gmail label/category.
		2. If the email contains any date, time, or event-related information, also include one additional action of type "schedule_google_calendar" with accurate event details (eventTitle, location, description, start, end).
		
		Guidelines for summaries:
		- Write in natural, plain text in the "emailSummary" field.
		- Capture all key facts, context, and intent of the email.
		- Be concise but do not omit critical details.
		- Prioritize completeness and accuracy over brevity when necessary.
		
		Guidelines for categorization:
		- Assign a Gmail label/category in the "category" field for every email.
		- Use clear, common categories like: Work, Personal, Finance, Events, Travel, Shopping, Important, Newsletters, Social, Health, Education, etc.
		- Choose the most relevant category based on the email's primary purpose and content.
		
		Guidelines for event detection:
		- Create a "schedule_google_calendar" action only if the email contains clear event data (date, time, topic, participants, or location).
		- In the event object, use "eventTitle" (not "summary") for the calendar event's title.
		- Infer missing details cautiously, based on strong contextual clues only.
		- Use ISO 8601 format for dateTime fields and valid IANA time zone names.
		- Include meaningful descriptions and locations (including virtual meeting links if mentioned).
		
		Output format:
		- Always return a single JSON object that strictly conforms to the provided schema.
		- The "actions" array may contain multiple items per email (e.g., one "summarize" and one "schedule_google_calendar").
		- Each "summarize" action must include: type, emailId, emailSummary, and category.
		- Each "schedule_google_calendar" action must include: type, emailId, and event (with eventTitle, location, description, start, end).
		- Do not include any text outside the JSON.
		
		If the user prompt includes extra instructions, adapt your behavior accordingly while maintaining valid JSON output.
		`
		
		const formattedEmails = GmailMappers.formatEmailsForAI(emails);
		const prompt = `${basePrompt}${userPrompt ? `\n\nUser prompt: ${userPrompt}` : ""}\n\nEmails: ${formattedEmails}`;

		let response: Response;
		try {
			response = await fetch(`${apiConfig.baseUrl}/api/openrouter`, {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ prompt }),
			});
		} catch (err) {
			const msg = err instanceof Error ? err.message : String(err);
			throw new Error(`Network error while calling AI API: ${msg}`);
		}

		if (!response.ok) {
			const bodyText = await response.text().catch(() => "<unable to read response body>");
			const shortBody = bodyText.length > 200 ? `${bodyText.slice(0, 200)}...` : bodyText;
			throw new Error(`API call failed: ${response.status} ${response.statusText} - ${shortBody}`);
		}

		let data: any = await response.json();

		const actions: Action[] = data;

		const structuredString = actions
			.map((action: Action, index: number) => {
				if (action.type === "summarize") {
					const a = action as any;
					return [
						`### Email ${index + 1} — Summary (emailId: ${a.emailId})`,
						`- Category: **${a.category || "Unspecified"}**`,
						"", // blank line
						"> " + a.emailSummary.replace(/\n/g, "\n> "),
					].join("\n");
				} else if (action.type === "schedule_google_calendar") {
					const a = action as any;
					const ev = a.event || {};
					return [
						`### Email ${index + 1} — Calendar Event (emailId: ${a.emailId})`,
						`- Title: **${ev.eventTitle || "(no title)"}**`,
						`- When: ${ev.start || "(no start)"} — ${ev.end || "(no end)"}`,
						`- Location: ${ev.location || "(none)"}`,
						"",
						"> " + (ev.description || "(no description)").replace(/\n/g, "\n> "),
					].join("\n");
				} else {
					return `### Email ${index + 1} — Unknown action type (${(action as any).type})`;
				}
			})
			.join("\n\n---\n\n");

		return structuredString;
>>>>>>> f90f018 (refactor(backend): change AI provider, fix Gmail API integration and JSON outputs)
	} catch (error) {
		console.error("Error getting summary:", error);
		throw error;
	}
}
